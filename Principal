library(DT)
library(shiny)
library(ggplot2)
library(leaflet)

# Charger les deux jeux de donn√©es
data_neuf <- read.csv("dpe_neuf.csv")        # DPE logements neufs
data_existant <- read.csv("dpe_existant.csv") # DPE logements existants

# Logo Enedis
logo_ui <- tags$div(
  style = "position: absolute; top: 10px; left: 10px; z-index: 1000;",
  tags$img(src = "enedis_logo.png", height = "50px")
)

ui <- navbarPage("Consommation √©nerg√©tique et DPE",
                 
  tabPanel(tagList(icon("info-circle"), "Contexte"),
    fluidPage(
      logo_ui,
      h2("Contexte de l'application"),
      p("Enedis souhaite √©valuer l'impact de la classe DPE sur la consommation des logements."),
      h3("Donn√©es disponibles"),
      DT::dataTableOutput("table_apercu"),
      h3("Statistiques"),
      verbatimTextOutput("stats_resume"),
      h3("R√©partition des classes DPE"),
      plotOutput("hist_dpe")
    )
  ),
  
  tabPanel(tagList(icon("chart-bar"), "Analyse & Visualisation"),
    sidebarLayout(
      sidebarPanel(
        logo_ui,
        checkboxGroupInput("source_dpe", "Source DPE :", choices = c("Neuf", "Existant"), selected = c("Neuf", "Existant")),
        checkboxGroupInput("energie", "Type d'√©nergie :", choices = NULL),
        sliderInput("surface", "Surface habitable (m¬≤) :", min = 0, max = 300, value = c(0, 300)),
        radioButtons("typologie", "Type de logement :", choices = NULL),
        actionButton("reset", "R√©initialiser les filtres")
      ),
      mainPanel(
        h3("üìä Histogramme des classes DPE"),
        plotOutput("plot_histogramme"),
        h3("üì¶ Bo√Æte √† moustaches : consommation par m¬≤"),
        plotOutput("plot_boite"),
        h3("üìà Diagramme des types d'√©nergie"),
        plotOutput("plot_diagramme"),
        h3("‚òÅÔ∏è Nuage de points : surface vs consommation"),
        plotOutput("plot_nuage")
      )
    )
  )
)

server <- function(input, output, session) {

  # Fusionner les deux jeux de donn√©es avec une colonne source
  data_neuf$source <- "Neuf"
  data_existant$source <- "Existant"
  data_all <- rbind(data_neuf, data_existant)

  # Mettre √† jour les filtres dynamiques
  observe({
    updateCheckboxGroupInput(session, "energie", choices = unique(data_all$type_energie_n1), selected = unique(data_all$type_energie_n1))
    updateRadioButtons(session, "typologie", choices = unique(data_all$typologie_logement), selected = unique(data_all$typologie_logement)[1])
  })

  # R√©initialisation des filtres
  observeEvent(input$reset, {
    updateCheckboxGroupInput(session, "source_dpe", selected = c("Neuf", "Existant"))
    updateCheckboxGroupInput(session, "energie", selected = unique(data_all$type_energie_n1))
    updateSliderInput(session, "surface", value = c(0, 300))
    updateRadioButtons(session, "typologie", selected = unique(data_all$typologie_logement)[1])
  })

  # Donn√©es filtr√©es
  data_filtr√©e <- reactive({
    subset(data_all,
      source %in% input$source_dpe &
      type_energie_n1 %in% input$energie &
      surface_habitable_logement >= input$surface[1] &
      surface_habitable_logement <= input$surface[2] &
      typologie_logement == input$typologie
    )
  })

  # Aper√ßu des donn√©es
  output$table_apercu <- DT::renderDataTable({ data_filtr√©e() })

  # Statistiques
  output$stats_resume <- renderPrint({ summary(data_filtr√©e()) })

  # Histogramme des classes DPE
  output$plot_histogramme <- renderPlot({
    ggplot(data_filtr√©e(), aes(x = etiquette_dpe)) +
      geom_bar(fill = "steelblue") +
      labs(x = "Classe DPE", y = "Nombre de logements")
  })

  # Bo√Æte √† moustaches
  output$plot_boite <- renderPlot({
    ggplot(data_filtr√©e(), aes(x = typologie_logement, y = conso_5.usages_par_m2_ef)) +
      geom_boxplot(fill = "orange") +
      labs(x = "Type de logement", y = "Consommation par m¬≤ (kWh/m¬≤)")
  })

  # Diagramme des types d'√©nergie
  output$plot_diagramme <- renderPlot({
    ggplot(data_filtr√©e(), aes(x = type_energie_n1)) +
      geom_bar(fill = "purple") +
      labs(x = "Type d'√©nergie", y = "Nombre de logements")
  })

  # Nuage de points
  output$plot_nuage <- renderPlot({
    ggplot(data_filtr√©e(), aes(x = surface_habitable_logement, y = conso_5_usages_ef)) +
      geom_point(alpha = 0.5, color = "darkblue") +
      geom_smooth(method = "lm", se = FALSE, color = "red") +
      labs(x = "Surface habitable (m¬≤)", y = "Consommation (kWh)")
  })
}

shinyApp(ui = ui, server = server)
