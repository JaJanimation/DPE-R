library(shiny)
library(DT)
library(ggplot2)
library(leaflet)
library(bslib)
library(thematic)

thematic::thematic_shiny()

# Chargement des données
data_neuf <- read.csv("dpe_neuf.csv")
data_existant <- read.csv("dpe_existant.csv")
data_neuf$source <- "Neuf"
data_existant$source <- "Existant"
data_all <- rbind(data_neuf, data_existant)

# Logo Enedis
logo_ui <- tags$div(
  style = "position: absolute; top: 10px; left: 10px; z-index: 1000;",
  tags$img(src = "enedis_logo.png", height = "50px")
)

# Interface utilisateur
ui <- fluidPage(
  theme = bs_theme(version = 5, bootswatch = "darkly"),

  # Sélecteur de thème
  fluidRow(
    column(1, tags$i(class = "fas fa-moon fa-lg", style = "color: #ccc;")),
    column(10, sliderInput("theme_slider", label = NULL, min = 0, max = 1, value = 0, step = 1)),
    column(1, tags$i(class = "fas fa-sun fa-lg", style = "color: #f5c518;"))
  ),

  navbarPage("Consommation énergétique et DPE",

    tabPanel(tagList(icon("info-circle"), "Contexte"),
      fluidPage(
        logo_ui,
        h2("Contexte de l'application"),
        p("Enedis souhaite évaluer l'impact de la classe DPE sur la consommation des logements."),
        h3("Données disponibles"),
        DT::dataTableOutput("table_apercu"),
        downloadButton("export_csv", "Télécharger les données filtrées"),
        h3("Statistiques"),
        verbatimTextOutput("stats_resume"),
        h3("Répartition des classes DPE"),
        plotOutput("hist_dpe"),
        downloadButton("export_hist", "Télécharger le graphique")
      )
    ),

    tabPanel(tagList(icon("chart-bar"), "Analyse et Visualisation"),
      sidebarLayout(
        sidebarPanel(
          logo_ui,
          checkboxGroupInput("source_dpe", "Source DPE :", choices = c("Neuf", "Existant"), selected = c("Neuf", "Existant")),
          checkboxGroupInput("energie", "Type d'énergie :", choices = NULL),
          sliderInput("surface", "Surface habitable (m²) :", min = 0, max = 300, value = c(0, 300)),
          radioButtons("typologie", "Type de logement :", choices = NULL),
          actionButton("reset", "Réinitialiser les filtres")
        ),
        mainPanel(
          h3("Histogramme des classes DPE"),
          plotOutput("plot_histogramme"),
          downloadButton("export_hist", "Télécharger le graphique"),

          h3("Boîte à moustaches : consommation par m²"),
          plotOutput("plot_boite"),
          downloadButton("export_boite", "Télécharger le graphique"),

          h3("Diagramme des types d'énergie"),
          plotOutput("plot_diagramme"),
          downloadButton("export_diagramme", "Télécharger le graphique"),

          h3("Nuage de points : surface vs consommation"),
          plotOutput("plot_nuage"),
          downloadButton("export_nuage", "Télécharger le graphique")
        )
      )
    ),

    tabPanel(tagList(icon("map-marked-alt"), "Carte interactive"),
      fluidPage(
        logo_ui,
        h3("Localisation des logements avec DPE"),
        leafletOutput("map_dpe", height = "600px")
      )
    )
  )
)

server <- function(input, output, session) {

  observe({
    theme_choice <- if (input$theme_slider == 0) "darkly" else "flatly"
    session$setCurrentTheme(bs_theme(version = 5, bootswatch = theme_choice))
  })

  observe({
    updateCheckboxGroupInput(session, "energie", choices = unique(data_all$type_energie_n1), selected = unique(data_all$type_energie_n1))
    updateRadioButtons(session, "typologie", choices = unique(data_all$typologie_logement), selected = unique(data_all$typologie_logement)[1])
  })

  observeEvent(input$reset, {
    updateCheckboxGroupInput(session, "source_dpe", selected = c("Neuf", "Existant"))
    updateCheckboxGroupInput(session, "energie", selected = unique(data_all$type_energie_n1))
    updateSliderInput(session, "surface", value = c(0, 300))
    updateRadioButtons(session, "typologie", selected = unique(data_all$typologie_logement)[1])
  })

  data_filtrée <- reactive({
    subset(data_all,
      source %in% input$source_dpe &
      type_energie_n1 %in% input$energie &
      surface_habitable_logement >= input$surface[1] &
      surface_habitable_logement <= input$surface[2] &
      typologie_logement == input$typologie
    )
  })

  output$table_apercu <- DT::renderDataTable({ data_filtrée() })

  output$stats_resume <- renderPrint({ summary(data_filtrée()) })

  output$hist_dpe <- renderPlot({
    ggplot(data_filtrée(), aes(x = etiquette_dpe)) +
      geom_bar(fill = "steelblue") +
      labs(x = "Classe DPE", y = "Nombre de logements")
  })

  output$plot_histogramme <- renderPlot({
    ggplot(data_filtrée(), aes(x = etiquette_dpe)) +
      geom_bar(fill = "steelblue") +
      labs(x = "Classe DPE", y = "Nombre de logements")
  })

  output$plot_boite <- renderPlot({
    ggplot(data_filtrée(), aes(x = typologie_logement, y = conso_5.usages_par_m2_ef)) +
      geom_boxplot(fill = "orange") +
      labs(x = "Type de logement", y = "Consommation par m² (kWh/m²)")
  })

  output$plot_diagramme <- renderPlot({
    ggplot(data_filtrée(), aes(x = type_energie_n1)) +
      geom_bar(fill = "purple") +
      labs(x = "Type d'énergie", y = "Nombre de logements")
  })

  output$plot_nuage <- renderPlot({
    ggplot(data_filtrée(), aes(x = surface_habitable_logement, y = conso_5_usages_ef)) +
      geom_point(alpha = 0.5, color = "darkblue") +
      geom_smooth(method = "lm", se = FALSE, color = "red") +
      labs(x = "Surface habitable (m²)", y = "Consommation (kWh)")
  })

  output$map_dpe <- renderLeaflet({
    leaflet(data_filtrée()) %>%
      addTiles() %>%
      addCircleMarkers(
        lng = ~coordonnee_cartographique_x_ban,
        lat = ~coordonnee_cartographique_y_ban,
        radius = 4,
        color = "blue",
        popup = ~paste("Classe DPE :", etiquette_dpe)
      )
  })

  # Export CSV
  output$export_csv <- downloadHandler(
    filename = function() {
      paste0("donnees_filtrees_", Sys.Date(), ".csv")
    },
    content = function(file) {
      write.csv(data_filtrée(), file, row.names = FALSE)
    }
  )

  # Export PNGs
  output$export_hist <- downloadHandler(
    filename = function() {
      paste0("histogramme_dpe_", Sys.Date(), ".png")
    },
    content = function(file) {
      png(file, width = 800, height = 600)
      print(
        ggplot(data_filtrée(), aes(x = etiquette_dpe)) +
          geom_bar(fill = "steelblue") +
          labs(x = "Classe DPE", y = "Nombre de logements")
      )
      dev.off()
    }
  )

  output$export_boite <- downloadHandler(
    filename = function() {
      paste0("boite_moustaches_", Sys.Date(), ".png")
    },
    content = function(file) {
      png(file, width = 800, height = 600)
      print(
        ggplot(data_filtrée(), aes(x = typologie_logement, y = conso_5.usages_par_m2_ef)) +
          geom_boxplot(fill = "orange") +
          labs(x = "Type de logement", y = "Consommation par m² (kWh/m²)")
      )
      dev.off()
    }
  )
    output$export_diagramme <- downloadHandler(
    filename = function() {
      paste0("diagramme_energie_", Sys.Date(), ".png")
    },
    content = function(file) {
      png(file, width = 800, height = 600)
      print(
        ggplot(data_filtrée(), aes(x = type_energie_n1)) +
          geom_bar(fill = "purple") +
          labs(x = "Type d'énergie", y = "Nombre de logements")
      )
      dev.off()
    }
  )

  output$export_nuage <- downloadHandler(
    filename = function() {
      paste0("nuage_surface_conso_", Sys.Date(), ".png")
    },
    content = function(file) {
      png(file, width = 800, height = 600)
      print(
        ggplot(data_filtrée(), aes(x = surface_habitable_logement, y = conso_5_usages_ef)) +
          geom_point(alpha = 0.5, color = "darkblue") +
          geom_smooth(method = "lm", se = FALSE, color = "red") +
          labs(x = "Surface habitable (m²)", y = "Consommation (kWh)")
      )
      dev.off()
    }
  )
}

shinyApp(ui = ui, server = server)
