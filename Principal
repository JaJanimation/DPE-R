install.packages("DT")
install.packages("shiny")
install.packages("ggplot2")
install.packages("leaflet")

library(DT)
library(shiny)
library(ggplot2)
library(leaflet)

# Charger les données
data <- read.csv("dpe_rhone.csv")  # Remplace par le vrai nom de ton fichier

ui <- navbarPage("Consommation énergétique et DPE",
                 
  tabPanel("Contexte",
    fluidPage(
      h2("Contexte de l'application"),
      p("Avec l'accélération du changement climatique et la hausse des prix de l'énergie, la sobriété énergétique est au cœur des préoccupations des Français. Enedis souhaite évaluer l'impact de la classe de Diagnostic de Performance Énergétique (DPE) sur la consommation des logements."),
      
      h3("Données disponibles"),
      DT::dataTableOutput("table_apercu"),
      
      h3("Statistiques"),
      verbatimTextOutput("stats_resume"),
      
      h3("Répartition des classes DPE"),
      plotOutput("hist_dpe")
    )
  ),
  
  tabPanel("Analyse par classe DPE",
    sidebarLayout(
      sidebarPanel(
        selectInput("classe", "Choisir une classe DPE :", choices = unique(data$etiquette_dpe))
      ),
      mainPanel(
        plotOutput("plot_classe"),
        tableOutput("table_classe")
      )
    )
  ),
  
  tabPanel("À compléter",
    fluidPage(
      h3("KPI énergétiques par classe DPE"),
      tableOutput("kpi_dpe"),
      
      h3("Consommation par m² selon le type de logement"),
      plotOutput("plot_typologie"),
      
      h3("Répartition des types d'énergie"),
      plotOutput("plot_energie"),
      
      h3("Corrélation entre surface et consommation"),
      plotOutput("plot_correlation")
    )
  )
)

  tabPanel("Carte interactive",
    fluidPage(
      h3("Localisation des logements avec DPE"),
      leafletOutput("map_dpe", height = "600px")
    )
  )

server <- function(input, output) {

  # Carte interactive
  output$map_dpe <- renderLeaflet({
    leaflet(data) %>%
      addTiles() %>%
      addCircleMarkers(
        lng = data$coordonnee_cartographique_x_ban,
        lat = data$coordonnee_cartographique_y_ban,
        radius = 4,
        color = "blue",
        popup = paste("Classe DPE :", data$etiquette_dpe)
      )
  })

  
  # Aperçu des données
  output$table_apercu <- DT::renderDataTable({
  data
  })
  
  # Statistiques descriptives
  output$stats_resume <- renderPrint({
    summary(data)
  })
  
  # Histogramme des classes DPE
  output$hist_dpe <- renderPlot({
    ggplot(data, aes(x = etiquette_dpe)) +
      geom_bar(fill = "steelblue") +
      labs(x = "Classe DPE", y = "Nombre de logements")
  })
  
  # Analyse par classe
  data_classe <- reactive({
    subset(data, etiquette_dpe == input$classe)
  })
  
  output$plot_classe <- renderPlot({
    ggplot(data_classe(), aes(x = conso_5_usages_ef)) +
      geom_histogram(binwidth = 200, fill = "darkorange", color = "white") +
      labs(x = "Consommation (kWh)", y = "Nombre de logements")
  })
  
  output$table_classe <- renderTable({
    head(data_classe())
  })
  
  # KPI par classe DPE
  output$kpi_dpe <- renderTable({
    aggregate(cbind(conso_5_usages_ef, cout_total_5_usages, emission_ges_5_usages) ~ etiquette_dpe, data, mean, na.rm = TRUE)
  })
  
  # Consommation par m² selon le type de logement
  output$plot_typologie <- renderPlot({
    ggplot(data, aes(x = typologie_logement, y = conso_5.usages_par_m2_ef)) +
      geom_boxplot(fill = "lightgreen") +
      labs(x = "Type de logement", y = "Consommation par m² (kWh/m²)")
  })
  
  # Répartition des types d'énergie
  output$plot_energie <- renderPlot({
    ggplot(data, aes(x = type_energie_n1)) +
      geom_bar(fill = "purple") +
      labs(x = "Type d'énergie principale", y = "Nombre de logements")
  })
  
  # Corrélation surface vs consommation
  output$plot_correlation <- renderPlot({
    ggplot(data, aes(x = surface_habitable_logement, y = conso_5_usages_ef)) +
      geom_point(alpha = 0.5, color = "darkblue") +
      geom_smooth(method = "lm", se = FALSE, color = "red") +
      labs(x = "Surface habitable (m²)", y = "Consommation (kWh)")
  })
}

shinyApp(ui = ui, server = server)
